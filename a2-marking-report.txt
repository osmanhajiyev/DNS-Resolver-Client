Total before late penalty: [59/65]

NOTE: in the marking report something left blank (e.g.  [ /6]) typically means
that you got full marks for that item. 
Bonus [2/2]


General Functionality and  IPV4: [22/28]

   [/2] Basic query to a name server that is authoritative.
   	(e.g. www.cs.ubc.ca to 198.162.35.1)

   [2/5] Basic Query that starts at root server and works to an
   authoritative server but doesn't do anything
   strange. (e.g. www.cs.ubc.ca to a root name server)

   [/5] A basic type query that results in a CNAME and the need to
   restart the search for the alias. (e.g. prep.ai.mit.edu)

   [/3] A query that returns a name server to use where the name
   server's address isn't provided. (e.g. www.stanford.edu)

   [/3] A complicated lookup series that potentially involves multiple
   cnames and DNS server name lookups (finance.google.ca)

   [0/3] Can deal with information in the additional information
   section when not all of it is of interest/use (e.g. groups.yahoo.com)

   [/3] Can deal with unconventional but valid response records for
   example uncompressed RR names, compression of the query name.

   [/2] The TTL reported is the last TTL from the A (or AAAA) record 
   when a CNAME is involved.

   [/2] If a query returns more than IP address all IP addresses
   are printed.


IPV6 Functionality  [7/7]
   [/1] Lookup of an IPV6 name where there is no IPV6 name but there is an IPV4 name
        so a -6 should be returned.
        java -jar DNSlookup.jar 198.162.35.1 www.cs.ubc.ca -6


   [/2] IPV6 lookup that goes through multiple name servers but returns
        -6 
       java -jar DNSlookup.jar 199.7.83.42 www.cs.ubc.ca -t6

   [/1] IPV6 that via CNAME
       java -jar DNSlookup.jar 199.7.83.42 prep.ai.mit.edu -t6

   [/1] IPV6 address lookup  
    java -jar DNSlookup.jar 199.7.83.42 finance.google.ca -t6

   [/2] IPV6 where one has to swith to do an IPV4 lookup of DNS
        server before swithing back to IPV6.
    java -jar DNSlookup.jar 199.7.83.42 www.stanford.edu -t6

Error Handling: [6/8]

   In this next section there is 1 mark for detecting the error and
   another for properly printing the output
   
   [0/2] Timeout - nameserver doesn't respond

   [0/2] Too many queries (e.g. loop1.csproject.org)

   [0/2] Name does not resolve returns 3  (e.g. wee.cs.ubc.ca)

   [/2] Other types of errors (e.g. just do a lookup of  .ca)

Tracing: [/13]

  [/2] Prints query ID, server being queried and FQDN
  
  [/1] Query ID is different for every query during a run
  
  [/1] Prints Response ID line, with query ID and whether or not this
       is an authoritative response

  [/2] Prints the counts for the Answers, Namservers, and Additional
  Information fields. Format is as required

  Printing of the Response Records

  [/2] Prints A in proper format
  [/1] Prints AAAA  in proper format
  [/1] Prints CNAMES in proper format
  [/1] Prints NS in proper format
  [/1] Prints type number if not in above

  [/1] Prints TTL

Broad Marking Criteria :                     [/9] 
See below for a detailed description of
this marking criteria
     Readability        [/3]
     Code Documentation [/3]
     Code Quality       [/3]


MARKER'S ADDITIONAL COMMENTS:



----------------------- Non Functional Criteria

Readability

It is important that your code is readable not only when you write it
but at some later time. It also needs to be readable by a
knowledgeable third (i.e. a TA, someone else in the classe :-). In
essence a knowlegeable third party would be somone capable of reading
the code and be broadly familiar with a typical solution approach but
might not be familiar with the subtle nuances of the algorithm you
have developed/used and how it manifests itself in the code. To make
your code readable it is important to consider the following sorts of
things:

    Make sure to use indention in a consistent fashion. In particular
    make sure that you don't use tabs as just how they are displayed
    depends upon a lot of things. You might have your tabs set to be 2
    spaces while someone else might have it set at 8 spaces or vary
    across the line and those differences will affect readability.

    Keeps lines to a reasonable link. Many display devices are
    optimized for looking at code that has no more than 80 characters
    on a line.
    
    Use white space (blank lines, spaces) to separate distinct blocks
    of code. Certainly you want blank lines (and some other stuff)
    between functions and within blocks of code in a function that
    perform a related task.  

    Make sure that your variables have meaningful names that suggest
    the type of information the variable holds and is purpose. The
    only exception (sometimes) is if the variable is loop index.  

    Make sure that functions/methods also have meaningful names and
    are organized in a meaningful way. Code used multiple times is to
    be encapsulated into functions.

Mark assignment criteria:

       3 marks - Code is "clean", understandable and well organized,
        with no issues.  
       2 marks - There may be minor issues with
        consistency of identation and use of white space. variable
        naming or general organization. Although annoying, this does
        not have a major impact on readability.  
       1 mark - There are major issues with indentation, whitespece,
        variable naming 0 marks - There are major problems across
        multiple categories with respect to readability  

Documenting your code

Every file provided to you that you need to add substantial content
to, or any file containing code that you add to the git project is to
start with a comment describing the purpose of this code from a high
level perspective. (If the file was not substantially empty then add
this comments at the point where you started adding your code.)  This
comment is to contain:

   A list of all the functions/methods that are to be called from
   outside this file. (i.e. functions/methods used only within this
   file are not included.) For each of these functions/methods provide
   a brief description of the function's purpose and what it returns,
   and, if appropriate, how to interpret any values that might be
   returned. For example you might indicate that it returns the count
   of the number of elements in an array or a negative value if an
   error was encountered.

   The code itself needs to be well commented, but care needs to be
   taken to avoid over commenting and affecting readability. The
   purpose of comments is to assist the reader in understanding what
   the code is supposed to do and **how** it goes about doing it. To
   achieve this make sure that there is a comment before each function
   explaining the purpose of the function, what it expects as inputs
   and produces as outputs. Within the code you should have comments
   explaining the purpose of lines of related code.

   Any unusual or complex algorithms or strategies for solving a
   problem also need to be documented in the code. In some cases
   these comments can go before the declaration of the function
   whereas in other cases the comment belongs with the relevant
   section of code. To help decide where the comment belongs evaluate
   the comment with respect to its purpose. If it is a general
   description of what you are doing and how then put it before the
   function or maybe even at the start of the file. If it is more
   related to the code then put it with the code. There need to be
   sufficient comments so that one doesn't have to read the code in
   detail to determine what the code is supposed to be doing. 

Mark assignment criteria:

     3 marks  - Code is well and completely commented    

     2 marks - One or two places could benefit from some additional
               comments to add clarity to what is being done.
     
     1 mark - Multiple locations where sections of code are
              uncommented or comments aren't helpful 

      0 marks - Few or no helpful comments

Code Quality

    There are often many poor or inefficient ways to write a program
to solve a problem and typically only a few good or reasonable ways. A
good way needs to balance efficiency across the dimensions of memory
usage to hold the code and/or data, the amount of CPU time used by the
program, and maintainability. In class (or tutorials) we will often
discuss certain ways of doing something and why. If you deviate from
these in any significant way it is important to justify these changes.
Mark assignment criteria:

     3 marks  - Uniformity good choices of algorithms and data
                structures across all aspects of the solution

     2 marks - Good choice of algorithms or data structures except
               for 1 or 2 situations where some improvement is possible

     1 mark - Poor algorithms or data structure choice in multiple
              situations and major improvement is possible.

     0 marks - Consistently poor algorithm and data structure choices.
